import sqlite3
import logging
import requests
import cairosvg
import os
import re
import asyncio
# import httpx # –ù–µ –Ω—É–∂–µ–Ω
from io import BytesIO
from dotenv import load_dotenv
# --- –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –ø–æ —Å—Ä–æ–∫—É ---
from datetime import datetime, timedelta, time # –î–æ–±–∞–≤–ª—è–µ–º time
from dateutil.relativedelta import relativedelta # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
# -----------------------------------------

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
    constants
)
from telegram.error import TelegramError, TimedOut
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from database import (
    init_db,
    save_client,
    delete_client_from_db,
    update_client_status,
    extend_client,
    get_client_by_name,
    get_all_clients,
)

# === –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö ===
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DB_DIR = os.getenv("DB_DIR", "db")
DEFAULT_SESSION_PASSWORD = os.getenv("SESSION_PASSWORD")

# === –°–ï–†–í–ï–†–´ ===
SERVERS = {
        os.getenv("SERVER1_KEY"): {"name": os.getenv("SERVER1_NAME"), "url": os.getenv("SERVER1_URL")},
        os.getenv("SERVER2_KEY"): {"name": os.getenv("SERVER2_NAME"), "url": os.getenv("SERVER2_URL")},
        os.getenv("SERVER3_KEY"): {"name": os.getenv("SERVER3_NAME"), "url": os.getenv("SERVER3_URL")}
}

# === –î–û–ü–£–°–ö–ê–ï–ú–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
allowed_users_str = os.getenv("ALLOWED_USERS", "")
try:
    ALLOWED_USERS = [int(user_id.strip()) for user_id in allowed_users_str.split(',') if user_id.strip()]
except ValueError:
    logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ALLOWED_USERS.")
    ALLOWED_USERS = []

def is_authorized(user_id: int) -> bool:
    if not ALLOWED_USERS: logging.warning("ALLOWED_USERS –ø—É—Å—Ç."); return False
    return user_id in ALLOWED_USERS

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ë–î ===
def get_db_path_for_user(context: ContextTypes.DEFAULT_TYPE) -> str | None:
    server_key = context.user_data.get('server_key')
    if server_key and server_key in SERVERS:
        return os.path.join(DB_DIR, f"{server_key}.db")
    # logging.warning("–ö–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data.")
    return None

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° API ===
# (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def create_session(base_url: str, password: str):
    try: response = requests.post(f"{base_url}/api/session", json={"password": password}, timeout=10); response.raise_for_status(); return response.cookies
    except requests.exceptions.RequestException as e: logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ {base_url}: {e}"); return None
def get_api_clients(cookies, base_url: str):
    if not cookies: return None
    try: response = requests.get(f"{base_url}/api/wireguard/client", cookies=cookies, timeout=10); response.raise_for_status(); return response.json()
    except requests.exceptions.RequestException as e: logging.error(f"–û—à–∏–±–∫–∞ get_clients {base_url}: {e}"); return None
    except requests.exceptions.JSONDecodeError as e: logging.error(f"–û—à–∏–±–∫–∞ JSON {base_url}: {e}"); return None
def get_api_client_configuration(client_id, cookies, base_url: str):
    if not cookies: return None
    try: response = requests.get(f"{base_url}/api/wireguard/client/{client_id}/configuration", cookies=cookies, timeout=10); response.raise_for_status(); return response.text
    except requests.exceptions.RequestException as e: logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ {client_id} —Å {base_url}: {e}"); return None
def get_api_qr_code_svg(client_id, cookies, base_url: str):
    if not cookies: return None
    try: response = requests.get(f"{base_url}/api/wireguard/client/{client_id}/qrcode.svg", cookies=cookies, timeout=10); response.raise_for_status(); return response.content
    except requests.exceptions.RequestException as e: logging.error(f"–û—à–∏–±–∫–∞ QR SVG {client_id} —Å {base_url}: {e}"); return None
def get_api_config_and_qr(client_name: str, base_url: str, password: str):
    cookies = create_session(base_url, password);
    if not cookies: return None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é."
    api_clients = get_api_clients(cookies, base_url);
    if api_clients is None: return None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤."
    client_data = next((c for c in api_clients if c["name"] == client_name), None)
    if not client_data: return None, None, f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
    client_id = client_data["id"]; config = get_api_client_configuration(client_id, cookies, base_url)
    qr_svg = get_api_qr_code_svg(client_id, cookies, base_url); qr_png, qr_error = None, None
    if qr_svg:
        try: qr_png = cairosvg.svg2png(bytestring=qr_svg)
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ SVG->PNG {client_name}: {e}"); qr_error = "–û—à–∏–±–∫–∞ QR SVG->PNG."
    else: qr_error = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR SVG."
    error_message = None
    if config is None and qr_png is None: error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –∫–æ–Ω—Ñ–∏–≥, –Ω–∏ QR."
    elif config is None: error_message = "–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –Ω–æ QR –µ—Å—Ç—å."
    elif qr_png is None: error_message = f"–ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª—É—á–µ–Ω, –Ω–æ {qr_error}"
    return config, qr_png, error_message
def create_client_api(client_name: str, base_url: str, password: str):
    cookies = create_session(base_url, password);
    if not cookies: return None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é."
    try:
        response = requests.post(f"{base_url}/api/wireguard/client", json={"name": client_name}, cookies=cookies, timeout=15)
        if response.status_code == 409: return None, None, f"–ö–ª–∏–µ–Ω—Ç '{client_name}' —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
        response.raise_for_status()
    except requests.exceptions.RequestException as e: logging.error(f"–û—à–∏–±–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è {client_name}: {e}"); return None, None, f"–û—à–∏–±–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è '{client_name}'."
    api_clients = get_api_clients(cookies, base_url);
    if api_clients is None: return None, None, "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (API), –Ω–æ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    client_data = next((c for c in api_clients if c["name"] == client_name), None)
    if not client_data: return None, None, "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (API), –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ."
    client_id = client_data["id"]; config = get_api_client_configuration(client_id, cookies, base_url)
    qr_svg = get_api_qr_code_svg(client_id, cookies, base_url); qr_png = None
    if qr_svg:
        try: qr_png = cairosvg.svg2png(bytestring=qr_svg)
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ SVG->PNG —Å–æ–∑–¥. {client_name}: {e}")
    error = None
    if config is None and qr_png is None: error = "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (API), –Ω–æ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞/QR."
    return config, qr_png, error
def delete_client_api(client_name: str, base_url: str, password: str):
    cookies = create_session(base_url, password);
    if not cookies: return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é."
    api_clients = get_api_clients(cookies, base_url);
    if api_clients is None: logging.warning(f"–ù–µ—Ç —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ {base_url} –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º {client_name}.")
    client_data = next((c for c in api_clients if c["name"] == client_name), None) if api_clients else None
    if client_data:
        client_id = client_data["id"]
        try:
            response = requests.delete(f"{base_url}/api/wireguard/client/{client_id}", cookies=cookies, timeout=10)
            response.raise_for_status(); logging.info(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' —É–¥–∞–ª–µ–Ω —Å API {base_url}.")
            return True, None
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è {client_name}: {e}")
            return False, f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ '{client_name}'."
    else:
        logging.info(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ API {base_url}.")
        return True, None
def toggle_client_status_api(client_name: str, enable: bool, base_url: str, password: str):
    cookies = create_session(base_url, password);
    if not cookies: return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é."
    api_clients = get_api_clients(cookies, base_url);
    if api_clients is None: return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤."
    client_data = next((c for c in api_clients if c["name"] == client_name), None)
    if not client_data: return False, f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
    client_id = client_data["id"]; action = "enable" if enable else "disable"
    try:
        response = requests.post(f"{base_url}/api/wireguard/client/{client_id}/{action}", cookies=cookies, timeout=10)
        response.raise_for_status()
        return True, f"–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ API ‚úÖ"
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ API {action} {client_name}: {e}")
        return False, f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ '{client_name}'."

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"), KeyboardButton("üá∂ –ó–∞–ø—Ä–æ—Å–∏—Ç—å QR")],
        [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")],
        [KeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"), KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")],
        [KeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
def get_back_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=False)
def get_creation_options_keyboard():
    keyboard = [
        [KeyboardButton("1 –º–µ—Å"), KeyboardButton("6 –º–µ—Å"), KeyboardButton("12 –º–µ—Å")],
        [KeyboardButton("üóìÔ∏è –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_authorized(user.id): logging.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {user.id} ({user.username})"); await update.message.reply_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    context.user_data.clear()
    buttons = [[InlineKeyboardButton(s["name"], callback_data=f"select_server:{k}")] for k, s in SERVERS.items()]
    if not buttons: await update.message.reply_text("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã."); return
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=reply_markup)
    await update.message.reply_text("...", reply_markup=ReplyKeyboardRemove())

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id): await update.message.reply_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return

    text = update.message.text
    logging.info(f"User {user_id} –∫–Ω–æ–ø–∫–∞: {text}")

    action_text = text.split(" ", 1)[-1] if text.startswith(("üìÑ", "üá∂", "‚ûï", "üóëÔ∏è", "‚è≥", "üë•", "üåê")) else text

    if action_text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä": await start(update, context); return

    db_path = get_db_path_for_user(context)
    server_name = context.user_data.get('server_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    base_url = context.user_data.get('base_url')

    if not db_path or not base_url: await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω. /start"); return

    context.user_data.pop("action", None); context.user_data.pop("duration", None); context.user_data.pop("extend_duration", None); context.user_data.pop("custom_expiry_date", None)
    await update.message.reply_text(f"üìç –°–µ—Ä–≤–µ—Ä: {server_name} (–ë–î: {os.path.basename(db_path)})")

    if action_text == "–°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥": context.user_data["action"] = "get_config"; await update.message.reply_text("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞:", reply_markup=get_back_keyboard())
    elif action_text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å QR": context.user_data["action"] = "get_qr"; await update.message.reply_text("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è QR:", reply_markup=get_back_keyboard())
    elif action_text == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞": context.user_data["action"] = "delete_client"; await update.message.reply_text("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_back_keyboard())
    elif action_text == "–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞": context.user_data["action"] = "select_creation_method"; await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_creation_options_keyboard())
    elif action_text == "–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è":
        context.user_data["action"] = "extend_select_duration"
        extend_duration_keyboard = ReplyKeyboardMarkup([ [KeyboardButton("1"), KeyboardButton("6"), KeyboardButton("12")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")] ], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ (–º–µ—Å.):", reply_markup=extend_duration_keyboard)

    elif action_text == "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤":
        password = context.user_data.get('password', DEFAULT_SESSION_PASSWORD)
        await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞...", reply_markup=get_main_keyboard())
        try: db_clients = get_all_clients(db_path)
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ë–î {db_path}: {e}"); await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ë–î {server_name}."); return
        if not db_clients: await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î {server_name}.", reply_markup=get_main_keyboard()); return
        cookies = create_session(base_url, password); api_clients = get_api_clients(cookies, base_url)
        output_messages = []; api_statuses = {}; api_error_flag = False
        if api_clients is not None: api_statuses = {c['name']: c.get('enabled', True) for c in api_clients}
        else: await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–æ–≤."); api_error_flag = True
        clients_found_on_server = False
        for name, expiry_date, db_status in db_clients:
            is_on_server = name in api_statuses; enabled = False
            if is_on_server: clients_found_on_server = True; enabled = api_statuses.get(name, False); emoji = "üü¢" if enabled else "üî¥"; status_text = "<b>enabled</b>" if enabled else "<b>disabled</b>"
            elif not api_error_flag: emoji = "‚ùì"; status_text = f"<pre>–Ω–µ—Ç –Ω–∞ API</pre>"
            else: emoji = "‚ö†Ô∏è"; status_text = "<pre>API N/A</pre>"
            expiry_str = f"<code>{expiry_date[:10] if expiry_date else '-'}</code>"
            message = f"{emoji} <b>{name}</b>\nüìå –°—Ç–∞—Ç—É—Å: {status_text}\n‚è≥ –î–æ: {expiry_str}"
            inline_keyboard = None
            if is_on_server and not api_error_flag: inline_keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª" if not enabled else "‚ñ∂Ô∏è", callback_data=f"enable:{name}"), InlineKeyboardButton("‚èπÔ∏è –í—ã–∫–ª" if enabled else "‚èπÔ∏è", callback_data=f"disable:{name}")] ])
            output_messages.append({'text': message, 'reply_markup': inline_keyboard})
        if not output_messages: await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç {server_name}.", reply_markup=get_main_keyboard()); return
        await update.message.reply_text(f"–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ ({len(output_messages)} —à—Ç.)...", reply_markup=get_main_keyboard())
        MESSAGE_LENGTH_LIMIT = 4096; logging.debug(f"–õ–∏–º–∏—Ç: {MESSAGE_LENGTH_LIMIT}")
        for i, msg_data in enumerate(output_messages):
             try:
                 if len(msg_data['text']) > MESSAGE_LENGTH_LIMIT: logging.warning(f"–°–æ–æ–±—â. {i} > –ª–∏–º–∏—Ç–∞."); client_name_from_msg = re.search(r"<b>(.*?)</b>", msg_data['text']); name_to_log = client_name_from_msg.group(1) if client_name_from_msg else f"idx {i}"; await update.message.reply_text(f"‚ö†Ô∏è >–ª–∏–º–∏—Ç –¥–ª—è {name_to_log}.")
                 else: await update.message.reply_text(text=msg_data['text'], parse_mode=constants.ParseMode.HTML, reply_markup=msg_data['reply_markup'])
                 await asyncio.sleep(0.2)
             except TelegramError as e: logging.error(f"–û—à–∏–±–∫–∞ TG –æ—Ç–ø—Ä. {i}: {e}"); await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä. {i}: {e}"); await asyncio.sleep(0.5)
             except Exception as e: logging.error(f"–ù–µ–∏–∑–≤. –æ—à–∏–±–∫–∞ {i}: {e!r}"); await update.message.reply_text(f"–ù–µ–∏–∑–≤. –æ—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞."); await asyncio.sleep(1)
        await update.message.reply_text("--- –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ ---", reply_markup=get_main_keyboard())
        if not clients_found_on_server and db_clients and not api_error_flag: await update.message.reply_text(f"‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –∏–∑ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ API {server_name}.", reply_markup=get_main_keyboard())


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id): return

    text = update.message.text.strip();
    if not text: return

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        current_action = context.user_data.get('action'); logging.info(f"User {user_id} –ù–∞–∑–∞–¥. –û—Ç–º–µ–Ω–∞: {current_action}")
        context.user_data.pop("action", None); context.user_data.pop("duration", None); context.user_data.pop("extend_duration", None); context.user_data.pop("custom_expiry_date", None)
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard()); return

    db_path = get_db_path_for_user(context)
    base_url = context.user_data.get('base_url')
    server_name = context.user_data.get('server_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    password = context.user_data.get('password', DEFAULT_SESSION_PASSWORD)
    action = context.user_data.get("action")

    if not db_path or not base_url: await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω. /start"); return
    if not action: logging.debug(f"–ù–µ—Ç action –¥–ª—è '{text}' –æ—Ç {user_id}"); return

    logging.info(f"User {user_id} Action: {action}, Input: '{text}', Server: {server_name}, DB: {os.path.basename(db_path)}")
    default_reply_markup = get_main_keyboard()

    try:
        if action == "select_creation_method":
            if text in ["1 –º–µ—Å", "6 –º–µ—Å", "12 –º–µ—Å"]:
                try: duration = int(text.split(" ")[0]); context.user_data["duration"] = duration; context.user_data["action"] = "create_client_duration"; await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=get_back_keyboard())
                except ValueError: await update.message.reply_text("–û—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∫–Ω–æ–ø–∫–æ–π.", reply_markup=get_creation_options_keyboard())
            elif text == "üóìÔ∏è –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É": context.user_data["action"] = "enter_custom_date"; await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=get_back_keyboard())
            else: await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=get_creation_options_keyboard())
            return

        elif action == "enter_custom_date":
            try:
                input_date = datetime.strptime(text, "%d.%m.%Y")
                if input_date.date() < datetime.now().date(): await update.message.reply_text("–î–∞—Ç–∞ –Ω–µ –º.–±. –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=get_back_keyboard()); return
                expiry_datetime = input_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                expiry_date_str = expiry_datetime.isoformat(timespec='microseconds')
                context.user_data["custom_expiry_date"] = expiry_date_str; context.user_data["action"] = "create_client_custom_date"; await update.message.reply_text(f"–î–∞—Ç–∞ {text} –ø—Ä–∏–Ω—è—Ç–∞. –ò–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=get_back_keyboard())
            except ValueError: await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=get_back_keyboard())
            return

        elif action == "extend_select_duration" and text in ["1", "6", "12"]: context.user_data["extend_duration"] = int(text); context.user_data["action"] = "extend_client"; await update.message.reply_text("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=get_back_keyboard())

        elif action in ["create_client_duration", "create_client_custom_date", "extend_client", "get_config", "get_qr", "delete_client"]:
            client_name = text
            final_expiry_date_str = None

            if action == "create_client_duration" or action == "create_client_custom_date":
                await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–∏–µ '{client_name}'...", reply_markup=default_reply_markup)
                if action == "create_client_duration":
                    duration = context.user_data.get("duration")
                    if duration is None: raise ValueError("–°—Ä–æ–∫ (duration) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    try: expiry_dt = datetime.now() + relativedelta(months=duration); final_expiry_date_str = expiry_dt.replace(hour=23, minute=59, second=59, microsecond=999999).isoformat(timespec='microseconds'); logging.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–∞—Ç–∞ –¥–æ {final_expiry_date_str}")
                    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã: {e}"); await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã."); context.user_data.pop("action", None); context.user_data.pop("duration", None); return
                else:
                    final_expiry_date_str = context.user_data.get("custom_expiry_date")
                    if final_expiry_date_str is None: raise ValueError("–ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –¥–∞—Ç–∞: {final_expiry_date_str}")

                config, qr_png, error_api = create_client_api(client_name, base_url, password)
                if error_api: await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {error_api}")
                if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" not in (error_api or ""):
                    try:
                        saved_to_db = save_client(db_path, client_name, final_expiry_date_str)
                        if saved_to_db:
                             if not error_api: await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' —Å–æ–∑–¥–∞–Ω ‚úÖ (–¥–æ {final_expiry_date_str[:10]})", reply_markup=default_reply_markup)
                             else: await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–¥–æ {final_expiry_date_str[:10]}), –Ω–æ –±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å API.", reply_markup=default_reply_markup)
                             if config: await update.message.reply_document(InputFile(BytesIO(config.encode('utf-8')), filename=f"{client_name}.conf"), caption=f"–ö–æ–Ω—Ñ–∏–≥ {client_name}")
                             else: await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ —Å API –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                             if qr_png: await update.message.reply_photo(BytesIO(qr_png), caption=f"QR-–∫–æ–¥ {client_name}")
                             else: await update.message.reply_text("‚ö†Ô∏è QR-–∫–æ–¥ —Å API –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                        else: await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å '{client_name}' –≤ –ë–î.", reply_markup=default_reply_markup)
                    except Exception as db_err: logging.error(f"–û—à–∏–±–∫–∞ –ë–î —Å–æ—Ö—Ä. {client_name} –≤ {db_path}: {db_err}"); await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è '{client_name}' –≤ –ë–î!", reply_markup=default_reply_markup)
                context.user_data.pop("duration", None); context.user_data.pop("custom_expiry_date", None)

            elif action == "extend_client":
                duration = context.user_data.get("extend_duration")
                if duration is None: raise ValueError("–°—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                try:
                    extended = extend_client(db_path, client_name, duration)
                    if extended: updated_client_info = get_client_by_name(db_path, client_name); new_expiry_date = updated_client_info[1] if updated_client_info and len(updated_client_info) > 1 and updated_client_info[1] else "–Ω–µ —É—Å—Ç."; await update.message.reply_text(f"–°—Ä–æ–∫ '{client_name}' –≤ –ë–î –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {duration} –º–µ—Å. ‚úÖ\n–î–æ: <code>{new_expiry_date}</code>", reply_markup=default_reply_markup, parse_mode=constants.ParseMode.HTML)
                    else: await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –ø—Ä–æ–¥–ª–µ–Ω –≤ –ë–î.", reply_markup=default_reply_markup)
                except Exception as db_err: logging.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–æ–¥–ª. {client_name} –≤ {db_path}: {db_err}"); await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–æ–¥–ª. '{client_name}'.")
                context.user_data.pop("extend_duration", None)

            elif action == "get_config":
                await update.message.reply_text(f"–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥–∞ '{client_name}'...", reply_markup=default_reply_markup)
                config, _, error = get_api_config_and_qr(client_name, base_url, password);
                if error and not config: await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error}")
                elif config: await update.message.reply_document(InputFile(BytesIO(config.encode('utf-8')), filename=f"{client_name}.conf"), caption=f"–ö–æ–Ω—Ñ–∏–≥ {client_name}\n\n{error or ''}")
                else: await update.message.reply_text(f"–ù–µ–∏–∑–≤. –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞.")
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=default_reply_markup)

            elif action == "get_qr":
                await update.message.reply_text(f"–ó–∞–ø—Ä–æ—Å QR '{client_name}'...", reply_markup=default_reply_markup)
                _, qr_png, error = get_api_config_and_qr(client_name, base_url, password);
                if error and not qr_png: await update.message.reply_text(f"–û—à–∏–±–∫–∞: {error}")
                elif qr_png: await update.message.reply_photo(BytesIO(qr_png), caption=f"QR-–∫–æ–¥ {client_name}\n\n{error or ''}")
                else: await update.message.reply_text(f"–ù–µ–∏–∑–≤. –æ—à–∏–±–∫–∞ QR.")
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=default_reply_markup)

            elif action == "delete_client":
                await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∏–µ '{client_name}'...", reply_markup=default_reply_markup)
                api_success, api_msg = delete_client_api(client_name, base_url, password)
                if not api_success: await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {api_msg}. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                else:
                    try: deleted_from_db = delete_client_from_db(db_path, client_name); final_message = f"–ö–ª–∏–µ–Ω—Ç '{client_name}' —É–¥–∞–ª–µ–Ω —Å API ({'—É—Å–ø–µ—à–Ω–æ' if api_msg is None else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}) –∏ –∏–∑ –ë–î ({'—É—Å–ø–µ—à–Ω–æ' if deleted_from_db else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}). ‚úÖ"; await update.message.reply_text(final_message, reply_markup=default_reply_markup)
                    except Exception as db_err: logging.error(f"–û—à–∏–±–∫–∞ –ë–î —É–¥–∞–ª. {client_name} –∏–∑ {db_path}: {db_err}"); await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' —É–¥–∞–ª–µ–Ω —Å API, –Ω–æ –û–®–ò–ë–ö–ê —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î!", reply_markup=default_reply_markup)

            context.user_data.pop("action", None)

        else:
             if action == "select_creation_method": await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=get_creation_options_keyboard())
             elif action == "enter_custom_date": await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:", reply_markup=get_back_keyboard())
             elif action == "extend_select_duration": await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä. –≤–≤–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("1"), KeyboardButton("6"), KeyboardButton("12")], [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=True))
             else: logging.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π action '{action}' –¥–ª—è '{text}'"); await update.message.reply_text("–ù–µ–∏–∑–≤. –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=default_reply_markup); context.user_data.pop("action", None)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await update.message.reply_text("–í–Ω—É—Ç—Ä. –æ—à–∏–±–∫–∞.", reply_markup=default_reply_markup)
        context.user_data.pop("action", None); context.user_data.pop("duration", None); context.user_data.pop("extend_duration", None); context.user_data.pop("custom_expiry_date", None)


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; user_id = query.from_user.id
    await query.answer()

    if not is_authorized(user_id):
        try: await query.edit_message_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        except Exception: pass
        return

    if not query.data: return
    logging.info(f"User {user_id} inline: {query.data}")

    if query.data.startswith("select_server:"):
        server_key = query.data.split(":", 1)[1]
        if server_key in SERVERS:
            selected_server = SERVERS[server_key]; db_path = os.path.join(DB_DIR, f"{server_key}.db")
            try:
                init_db(db_path)
                logging.info(f"–ë–î –¥–ª—è {server_key} –≥–æ—Ç–æ–≤–∞.")
            except Exception as e:
                 # --- –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨ ---
                 logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑. –ë–î {db_path} –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                 try:
                     await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î —Å–µ—Ä–≤–µ—Ä–∞!", reply_markup=None)
                 except Exception:
                     pass
                 return
                 # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            context.user_data['server_key'] = server_key; context.user_data['base_url'] = selected_server['url']; context.user_data['server_name'] = selected_server['name']; context.user_data['password'] = DEFAULT_SESSION_PASSWORD
            try:
                await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω: {selected_server['name']}", reply_markup=None)
            except Exception:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text="–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        else:
             try:
                 await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤. —Å–µ—Ä–≤–µ—Ä.", reply_markup=None)
             except Exception:
                 pass
        return

    db_path = get_db_path_for_user(context)
    base_url = context.user_data.get('base_url')
    server_name = context.user_data.get('server_name', 'N/A')
    password = context.user_data.get('password', DEFAULT_SESSION_PASSWORD)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨ ---
    if not db_path or not base_url:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            reply_markup=get_main_keyboard()
        )
        try:
            if query.message:
                await query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass
        return
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    if query.data.startswith("enable:") or query.data.startswith("disable:"):
        try: action_cb, client_name = query.data.split(":", 1)
        except ValueError: logging.error(f"–ù–µ–∫–æ—Ä—Ä. callback –≤–∫–ª/–≤—ã–∫–ª: {query.data}"); return

        enable = (action_cb == "enable")
        api_success, api_msg = toggle_client_status_api(client_name, enable, base_url, password)
        db_update_success = False
        if api_success:
            try:
                db_status = "enabled" if enable else "disabled"
                updated_in_db = update_client_status(db_path, client_name, db_status)
                if updated_in_db: db_update_success = True
                else: logging.warning(f"'{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {os.path.basename(db_path)} –¥–ª—è update.")
            except Exception as db_err: logging.error(f"–û—à–∏–±–∫–∞ –ë–î update {client_name} –≤ {os.path.basename(db_path)}: {db_err}")

        result_message = api_msg if api_msg else ("–£—Å–ø–µ—à–Ω–æ" if api_success else "–û—à–∏–±–∫–∞")
        if api_success and not db_update_success: result_message += "\n‚ö†Ô∏è –ë–î –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
        elif not api_success: result_message += "\n –ë–î –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞."

        current_status_text, emoji, is_enabled_now = "<pre>API N/A</pre>", "‚ö†Ô∏è", None
        cookies = create_session(base_url, password)
        api_clients = get_api_clients(cookies, base_url) if cookies else None
        api_client = next((c for c in api_clients if c["name"] == client_name), None) if api_clients is not None else None

        if api_client: is_enabled_now = api_client.get('enabled', False); emoji = "üü¢" if is_enabled_now else "üî¥"; current_status_text = "<b>enabled</b>" if is_enabled_now else "<b>disabled</b>"
        elif api_clients is not None: emoji = "‚ùì"; current_status_text = f"<pre>–Ω–µ—Ç –Ω–∞ API</pre>"

        try: client_db_info = get_client_by_name(db_path, client_name); expiry_str = f"<code>{client_db_info[1][:10] if client_db_info and len(client_db_info)>1 and client_db_info[1] else '-'}</code>"
        except Exception: expiry_str = "<i>–æ—à–∏–±–∫–∞ –ë–î</i>"

        new_message_text = f"{emoji} <b>{client_name}</b>\nüìå –°—Ç–∞—Ç—É—Å: {current_status_text}\n‚è≥ –î–æ: {expiry_str}\n\n<i>{result_message}</i>"
        new_keyboard = None
        if api_client: new_keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª" if not is_enabled_now else "‚ñ∂Ô∏è", callback_data=f"enable:{client_name}"), InlineKeyboardButton("‚èπÔ∏è –í—ã–∫–ª" if is_enabled_now else "‚èπÔ∏è", callback_data=f"disable:{client_name}")] ])

        try:
            if query.message and (query.message.text != new_message_text or query.message.reply_markup != new_keyboard):
                 logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {client_name}")
                 await query.edit_message_text(text=new_message_text, parse_mode=constants.ParseMode.HTML, reply_markup=new_keyboard)
                 logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {client_name} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
            elif query.message: logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {client_name} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            else: logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å query.message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        except TelegramError as e:
             logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {client_name}. –û—à–∏–±–∫–∞ Telegram: {e!r}")
             # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception as e:
             logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {client_name}: {e!r}")


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞ {update}:", exc_info=context.error)
    if isinstance(context.error, TimedOut):
        logging.warning("–¢–∞–π–º–∞—É—Ç Telegram API.")
        if isinstance(update, Update) and update.effective_chat:
             try:
                 if update.effective_message and update.effective_message.text: await context.bot.send_message(chat_id=update.effective_chat.id, text="‚è≥ –°–µ—Ä–≤–µ—Ä Telegram –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
             except Exception as e_inner: logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä. —Å–æ–æ–±—â. –æ —Ç–∞–π–º–∞—É—Ç–µ: {e_inner}")
        return
    if isinstance(context.error, TelegramError): logging.warning(f"–û—à–∏–±–∫–∞ Telegram: {context.error}")
    if isinstance(update, Update) and update.effective_chat:
        try: await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞.")
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä. —Å–æ–æ–±—â. –æ–± –æ—à–∏–±–∫–µ: {e}")

# === –ó–ê–ü–£–°–ö ===
def main():
    if not TELEGRAM_TOKEN: print("CRITICAL: –ù–µ—Ç TELEGRAM_TOKEN"); logging.critical("–ù–µ—Ç TOKEN"); return
    if not ALLOWED_USERS: print("CRITICAL: –ù–µ—Ç ALLOWED_USERS"); logging.critical("–ù–µ—Ç ALLOWED_USERS"); return
    if not SERVERS: print("CRITICAL: SERVERS –ø—É—Å—Ç"); logging.critical("SERVERS –ø—É—Å—Ç"); return

    try:
        if not os.path.exists(DB_DIR): os.makedirs(DB_DIR); print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î: {DB_DIR}"); logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î: {DB_DIR}")
        for server_key in SERVERS.keys(): db_path_init = os.path.join(DB_DIR, f"{server_key}.db"); init_db(db_path_init)
        logging.info("–í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e: print(f"CRITICAL: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}"); logging.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}"); return

    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram.vendor.ptb_urllib3.urllib3").setLevel(logging.WARNING)

    app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .connect_timeout(15.0)
        .read_timeout(30.0)
        .write_timeout(10.0)
        # .pool_timeout(30.0) # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        .build()
    )

    main_menu_options = [ "üìÑ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", "üá∂ –ó–∞–ø—Ä–æ—Å–∏—Ç—å QR", "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "üë• –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "üåê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä" ]
    app.add_handler(MessageHandler(filters.Regex(f"^({'|'.join(map(re.escape, main_menu_options))})$") & filters.ChatType.PRIVATE, handle_buttons))

    app.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_message))
    app.add_error_handler(error_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try: from dateutil.relativedelta import relativedelta; from datetime import datetime, timedelta, time
    except ImportError: print("–û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ python-dateutil. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install python-dateutil"); exit(1)
    main()
